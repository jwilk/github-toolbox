#!/usr/bin/env bash

# Copyright Â© 2018-2022 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

usage()
{
    printf 'Usage: %s {-r|-p|-v|-c} REPO\n' "$prog"
    if [[ ${1-} == long ]]
    then
        printf '\n'
        cat <<'EOF'
Options:
  -r          show popular referrers
  -p          show popular paths
  -v          show views
  -c          show clones
  -h, --help  show this help message and exit
EOF
    fi
}

set -e -u
prog="${0##*/}"
type=
while getopts 'rpvch-:' opt
do
    case "$opt" in
        r|p|v|c)
            type="$opt";;
        h)
            usage long
            exit 0;;
        -)
            if [[ $OPTARG == help ]]; then
                usage long
                exit 0
            else
                usage >&2
                exit 1
            fi
            ;;
        *) exit 1;;
    esac
done
shift $((OPTIND - 1))
if [[ -z $type ]] || [ $# -ne 1 ]
then
    usage >&2
    exit 1
fi
repo="$1"
repo=${repo#https://github.com/}
if [[ $repo != */* ]]
then
    echo "$prog: error: bad repository name: did you mean '$LOGNAME/$repo'?" >&2
    exit 1
fi
url="https://api.github.com/repos/$repo/traffic"
node=''
case "$type" in
    r)
        suffix=popular/referrers
        columns=('referrer')
        ;;
    p)
        suffix=popular/paths
        columns=('path' 'title')
        ;;
    v)
        suffix=views
        columns=('timestamp[:10]')
        node=views
        ;;
    c)
        suffix=clones
        node=clones
        columns=('timestamp[:10]')
        ;;
esac
url="$url/$suffix"
set +f
jq=".${node}[] | [.count, .uniques$(printf ', .%s' "${columns[@]}")] | @tsv"
set -f
printf 'GET %s\n' "$url" >&2
gh api "$url" --jq="$jq"

# vim:ts=4 sts=4 sw=4 et
